def country = "iaaUSA"

pipeline {
	agent {
           node { label 'master'}
        }
        options { timestamps() }
        environment { 
               CC = 'cloud'
               AA = 'hey'
         }
        parameters {
           string(name:'WHO', defaultValue: 'trump', description: 'nothing')
        }
        stages { 
	    stage('build') { 
                     options { retry(3) }             
                   //input {
                     // message " Should I continue"
                      //ok" yes"
                   //}
                   when {
                       anyOf { 
                        environment name: 'CC', value: 'cloud'
                        environment name: 'AA', value: 'cloud' }
                   }
                   steps {
	             sh "echo ${country}" 
                     echo "${params.WHO}"
                     echo "$CC"
                     echo "${WORKSPACE}"
                     echo "$currentBuild.number"
                     sh 'touch testhfil391'
                     dir('testdir') {
                                 sh 'touch jenkins'
                     }        
                  }                 
                  post { 
                        success {
				withVault(configuration: [timeout: 60, vaultCredentialId: 'file_token', vaultUrl: 'http://localhost:8200'], vaultSecrets: [[path: 'secrets/data/ansible', secretValues: [[vaultKey: 'username'], [vaultKey: 'password']]]]) 
				sh 'sh bash.sh'
                                echo 'the sh has failed the pipeline' } }  //This step in this stage wiil not run because the above step will fail.
            }
            stage('git_pull') {
   
                  steps {
                      // withCredentials([sshUserPrivateKey(credentialsId: 'root-key', keyFileVariable: 'root-key', passphraseVariable: '', usernameVariable: 'root-key')]) {
                      // sh("git pull git@github.com:mbah1977/jenkins.git") }
                         sh 'sh bash.sh'  //This script has been designed to fail with an exit code of 2 so to fail the pipeline.
		 }
            }
      }
       post {
           failure { 
                  echo 'the script above failed the pipline' 
        }
           always {
                echo "I will always run no matter what happens with the pipeline steps" }
    }
}
